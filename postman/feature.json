{
	"info": {
		"_postman_id": "c7681e21-22ff-4603-aa91-682d1bb1c50e",
		"name": "Feature Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29233094"
	},
	"item": [
		{
			"name": "User 1 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Raquel O Keefe\",\r\n    \"email\":\"Keon_Corkery732@hotmail.com\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User 2 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"User 2\",\r\n    \"email\":\"Keon_Corkery7@hotmail.com\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User 3 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"User 3\",\r\n    \"email\":\"Keon@hotmail.com\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has category create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"copying_91\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has post create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\":\"Consequatur recusandae ratione aspernatur atque maxime voluptatum consequatur totam dignissimos. Non quis non est enim. Voluptatibus et voluptatum velit animi ad necessitatibus architecto. Quia esse assumenda vel aspernatur aut ab quos.\",\r\n    \"category\":1,\r\n    \"description\":\"Unde voluptas voluptatem perferendis odit qui iusto non vitae. In labore odio. Esse quidem et sit ut ullam non dolorem sunt.\\n \\rQuas ut maiores dignissimos at nihil voluptatem minus atque. Eos mollitia eos eveniet enim voluptas natus esse corrupti. Dolor incidunt omnis. Rerum quidem eius modi ut aut et. Quaerat eligendi totam quam.\\n \\rQui expedita doloremque ducimus. Odio rerum illum aliquid quod fuga. Cumque non dolorem illum officia placeat magni deserunt adipisci tenetur. Aperiam qui quo tempora accusantium. Iure qui fugiat sint dolorum dolor rerum ut.\",\r\n    \"eventDate\":\"2025-02-01 22:05:16\",\r\n    \"location\":\r\n        {\r\n            \"lat\":-76.1337,\r\n            \"lon\":144.6666\r\n        },\r\n    \"paid\":\"true\",\r\n    \"participantLimit\":\"781\",\r\n    \"requestModeration\":\"false\",\r\n    \"title\":\"Molestiae ducimus repellendus sunt repellendus.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post comment 1 к своему мероприятию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"comment for event 1\"').to.eql(\"comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"some text of comment\"').to.eql(\"some text of comment\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post comment 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"comment for event 1\"').to.eql(\"comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"some text of comment\"').to.eql(\"some text of comment\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post comment некорректный id мероприятия",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=10000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post comment некорректный id пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/10000/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"10000",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post comment длина названия меньше 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"co\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/3/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"3",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post comment длина названия больше 100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1 comment for event 1 comment for event 1 comment for event 1 comment for event 1 comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post comment длина текста комментария меньше 20",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post comment длина теста комментария больше 1000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment некорректный id пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/10000/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"10000",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment длина названия меньше 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"co\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment длина названия больше 100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1 comment for event 1 comment for event 1 comment for event 1 comment for event 1 comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment длина текста комментария меньше 20",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment длина теста комментария больше 1000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment 2 чужой комментарий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment 2 no title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"comment for event 1\"').to.eql(\"comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"new some text of comment\"').to.eql(\"new some text of comment\");\r",
							"});\r",
							"pm.test(\"Test comment 'isEdited' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    pm.expect(jsonData.isEdited, '\"isEdited\" must be \"true\"').to.eql(true);\r",
							"});\r",
							"pm.test(\"Test comment 'tsEdition' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('tsEdition');\r",
							"    pm.expect(jsonData.tsEdition, '\"tsEdition\" must be \"not null\"').not.eql(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2/comments/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment 1 full new body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"new comment for event 1\"').to.eql(\"new comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"new some text of comment\"').to.eql(\"new some text of comment\");\r",
							"});\r",
							"pm.test(\"Test comment 'isEdited' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    pm.expect(jsonData.isEdited, '\"isEdited\" must be \"true\"').to.eql(true);\r",
							"});\r",
							"pm.test(\"Test comment 'tsEdition' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('tsEdition');\r",
							"    pm.expect(jsonData.tsEdition, '\"tsEdition\" must be \"not null\"').not.eql(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"new comment for event 1\",\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment 1 ранее, чем через час",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"new comment for event 1\",\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post like comment 1 from user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1?like=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "like",
							"value": "LIKE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post like comment 1 некорректный статус",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/3/comments/1?like=LIKE-DISLIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"3",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "like",
							"value": "LIKE-DISLIKE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post like comment 1 from user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"new comment for event 1\"').to.eql(\"new comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"new some text of comment\"').to.eql(\"new some text of comment\");\r",
							"});\r",
							"pm.test(\"Test comment 'isEdited' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    pm.expect(jsonData.isEdited, '\"isEdited\" must be \"true\"').to.eql(true);\r",
							"});\r",
							"pm.test(\"Test comment 'tsEdition' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('tsEdition');\r",
							"    pm.expect(jsonData.tsEdition, '\"tsEdition\" must be \"not null\"').not.eql(null);\r",
							"});\r",
							"pm.test(\"Test comment 'likes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('likes');\r",
							"    pm.expect(jsonData.likes, '\"likes\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'dislikes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('dislikes');\r",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 0').to.eql(0);\r",
							"});\r",
							"pm.test(\"Test comment 'rating' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('rating');\r",
							"    pm.expect(jsonData.rating, '\"rating\" must be 1').to.eql(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2/comments/1?like=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "like",
							"value": "LIKE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post dislike comment 1 from user 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"new comment for event 1\"').to.eql(\"new comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"new some text of comment\"').to.eql(\"new some text of comment\");\r",
							"});\r",
							"pm.test(\"Test comment 'isEdited' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    pm.expect(jsonData.isEdited, '\"isEdited\" must be \"true\"').to.eql(true);\r",
							"});\r",
							"pm.test(\"Test comment 'tsEdition' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('tsEdition');\r",
							"    pm.expect(jsonData.tsEdition, '\"tsEdition\" must be \"not null\"').not.eql(null);\r",
							"});\r",
							"pm.test(\"Test comment 'likes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('likes');\r",
							"    pm.expect(jsonData.likes, '\"likes\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'dislikes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('dislikes');\r",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be -1').to.eql(-1);\r",
							"});\r",
							"pm.test(\"Test comment 'rating' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('rating');\r",
							"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/3/comments/1?like=DISLIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"3",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "like",
							"value": "DISLIKE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post like comment 1 from user 2 again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"new comment for event 1\"').to.eql(\"new comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"new some text of comment\"').to.eql(\"new some text of comment\");\r",
							"});\r",
							"pm.test(\"Test comment 'isEdited' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    pm.expect(jsonData.isEdited, '\"isEdited\" must be \"true\"').to.eql(true);\r",
							"});\r",
							"pm.test(\"Test comment 'tsEdition' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('tsEdition');\r",
							"    pm.expect(jsonData.tsEdition, '\"tsEdition\" must be \"not null\"').not.eql(null);\r",
							"});\r",
							"pm.test(\"Test comment 'likes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('likes');\r",
							"    pm.expect(jsonData.likes, '\"likes\" must be 0').to.eql(0);\r",
							"});\r",
							"pm.test(\"Test comment 'dislikes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('dislikes');\r",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be -1').to.eql(-1);\r",
							"});\r",
							"pm.test(\"Test comment 'rating' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('rating');\r",
							"    pm.expect(jsonData.rating, '\"rating\" must be -1').to.eql(-1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2/comments/1?like=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "like",
							"value": "LIKE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post like comment 1 from user 2 again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"new comment for event 1\"').to.eql(\"new comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"new some text of comment\"').to.eql(\"new some text of comment\");\r",
							"});\r",
							"pm.test(\"Test comment 'isEdited' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    pm.expect(jsonData.isEdited, '\"isEdited\" must be \"true\"').to.eql(true);\r",
							"});\r",
							"pm.test(\"Test comment 'tsEdition' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('tsEdition');\r",
							"    pm.expect(jsonData.tsEdition, '\"tsEdition\" must be \"not null\"').not.eql(null);\r",
							"});\r",
							"pm.test(\"Test comment 'likes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('likes');\r",
							"    pm.expect(jsonData.likes, '\"likes\" must be 0').to.eql(0);\r",
							"});\r",
							"pm.test(\"Test comment 'dislikes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('dislikes');\r",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 0').to.eql(0);\r",
							"});\r",
							"pm.test(\"Test comment 'rating' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('rating');\r",
							"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/3/comments/1?like=DISLIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"3",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "like",
							"value": "DISLIKE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post dislike comment 1 from user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"new comment for event 1\"').to.eql(\"new comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"new some text of comment\"').to.eql(\"new some text of comment\");\r",
							"});\r",
							"pm.test(\"Test comment 'isEdited' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    pm.expect(jsonData.isEdited, '\"isEdited\" must be \"true\"').to.eql(true);\r",
							"});\r",
							"pm.test(\"Test comment 'tsEdition' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('tsEdition');\r",
							"    pm.expect(jsonData.tsEdition, '\"tsEdition\" must be \"not null\"').not.eql(null);\r",
							"});\r",
							"pm.test(\"Test comment 'likes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('likes');\r",
							"    pm.expect(jsonData.likes, '\"likes\" must be 0').to.eql(0);\r",
							"});\r",
							"pm.test(\"Test comment 'dislikes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('dislikes');\r",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be -1').to.eql(-1);\r",
							"});\r",
							"pm.test(\"Test comment 'rating' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('rating');\r",
							"    pm.expect(jsonData.rating, '\"rating\" must be -1').to.eql(-1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2/comments/1?like=DISLIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "like",
							"value": "DISLIKE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post like comment 1 from user 2 again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"new comment for event 1\"').to.eql(\"new comment for event 1\");\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"new some text of comment\"').to.eql(\"new some text of comment\");\r",
							"});\r",
							"pm.test(\"Test comment 'isEdited' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    pm.expect(jsonData.isEdited, '\"isEdited\" must be \"true\"').to.eql(true);\r",
							"});\r",
							"pm.test(\"Test comment 'tsEdition' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('tsEdition');\r",
							"    pm.expect(jsonData.tsEdition, '\"tsEdition\" must be \"not null\"').not.eql(null);\r",
							"});\r",
							"pm.test(\"Test comment 'likes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('likes');\r",
							"    pm.expect(jsonData.likes, '\"likes\" must be 0').to.eql(0);\r",
							"});\r",
							"pm.test(\"Test comment 'dislikes' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('dislikes');\r",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 0').to.eql(0);\r",
							"});\r",
							"pm.test(\"Test comment 'rating' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('rating');\r",
							"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2/comments/1?like=DISLIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "like",
							"value": "DISLIKE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск комментариев, содержащих текст (некорректный запрос)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=1&text=     ",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "text",
							"value": "     "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск комментариев, содержащих отсутствующий текст",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has comment get response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Has comment get response\", function () {\r",
							"    pm.response.to.have.body();\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=1&text=отсутствующий текст",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "text",
							"value": "отсутствующий текст"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск комментариев, содержащих текст",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list comments response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=1&text=some text",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "text",
							"value": "some text"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск комментариев, содержащих текст (ignore case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list comments response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=1&text=soME tExT",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "text",
							"value": "soME tExT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск комментариев, содержащих текст (ignore case, only title)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list comments response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments?eventId=1&text=new comment for event 1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "text",
							"value": "new comment for event 1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post complaint comment 1 from user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"new some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1/complaints",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1",
						"complaints"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post complaint comment 2 from user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Test complaint 'comment.id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('comment');\r",
							"    pm.expect(jsonData.comment).to.have.property('id');\r",
							"    pm.expect(jsonData.comment.id, '\"comment.id\" field must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test complaint 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" field must be \"this is a very bad comment\"').to.eql(\"this is a very bad comment\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"this is a very bad comment\"    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/2/complaints",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"2",
						"complaints"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post complaint comment 2 from user 1 again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"this is a very bad comment\"    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/2/complaints",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"2",
						"complaints"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post complaint comment 2 from user 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Test complaint 'comment.id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('comment');\r",
							"    pm.expect(jsonData.comment).to.have.property('id');\r",
							"    pm.expect(jsonData.comment.id, '\"comment.id\" field must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test complaint 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" field must be \"this is the worst comment\"').to.eql(\"this is the worst comment\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"this is the worst comment\"    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/3/comments/1/complaints",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"3",
						"comments",
						"1",
						"complaints"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск жалоб на комментарии, ожидающих рассмотрения",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list complatints response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test complatint[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test complatint[0] 'comment id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('comment');\r",
							"    pm.expect(jsonData[0].comment).to.have.property('id');\r",
							"    pm.expect(jsonData[0].comment.id, '\"comment id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test complatint[1] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test complatint[1] 'comment id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('comment');\r",
							"    pm.expect(jsonData[1].comment).to.have.property('id');\r",
							"    pm.expect(jsonData[1].comment.id, '\"comment id\" must be 1').to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/complaints",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"complaints"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск жалоб по id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test complatint 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test complatint 'comment.id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('comment');\r",
							"    pm.expect(jsonData.comment).to.have.property('id');\r",
							"    pm.expect(jsonData.comment.id, '\"comment.id\" must be 2').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/complaints/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"complaints",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск жалоб по id некорректный запрос",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/complaints/1?support=false-true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"complaints",
						"1"
					],
					"query": [
						{
							"key": "support",
							"value": "false-true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск жалоб по id not supported",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/complaints/1?support=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"complaints",
						"1"
					],
					"query": [
						{
							"key": "support",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск жалоб по id to be the same",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test complatint 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test complatint 'comment.id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('comment');\r",
							"    pm.expect(jsonData.comment).to.have.property('id');\r",
							"    pm.expect(jsonData.comment.id, '\"comment.id\" must be 2').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/complaints/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"complaints",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск жалоб по id supported",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/complaints/1?support=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"complaints",
						"1"
					],
					"query": [
						{
							"key": "support",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск жалоб по id жалоба не должна быть найдена",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/complaints/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"complaints",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get поиск комментария по id после удаления по жалобе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"comment for event 1\",\r\n    \"text\":\"some text of comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comment удалениe чужого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/3/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"3",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comment удалениe несуществующего комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/200",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"200"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}